/*
 * This source file was generated by the Gradle 'init' task
 */
package org.codeposito;

import org.codeposito.structural.adapter.AdapterClient;
import org.codeposito.structural.bridge.BridgeClient;
import org.codeposito.structural.composite.CompositeClient;
import org.codeposito.structural.decorator.DecoratorClient;
import org.codeposito.structural.facade.FacadeClient;
import org.codeposito.structural.flyweight.FlyweightClient;
import org.codeposito.structural.proxy.ProxyClient;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        if (args.length > 0) {
            switch (args[0]) {
                case "adapter":
                    // Run the adapter pattern demo
                    AdapterClient.main(new String[]{});
                    break;
                case "bridge":
                    // Run the bridge pattern demo
                    BridgeClient.main(new String[]{});
                    break;
                case "composite":
                    // Run the composite pattern demo
                    CompositeClient.main(new String[]{});
                    break;
                case "decorator":
                    // Run the decorator pattern demo
                    DecoratorClient.main(new String[]{});
                    break;
                case "facade":
                    // Run the facade pattern demo
                    FacadeClient.main(new String[]{});
                    break;
                case "flyweight":
                    // Run the flyweight pattern demo
                    FlyweightClient.main(new String[]{});
                    break;
                case "proxy":
                    // Run the proxy pattern demo
                    ProxyClient.main(new String[]{});
                    break;
                default:
                    System.out.println("Unknown pattern: " + args[0]);
                    printUsage();
                    break;
            }
        } else {
            System.out.println(new App().getGreeting());
            printUsage();
        }
    }
    
    private static void printUsage() {
        System.out.println("Available pattern demos:");
        System.out.println("  ./gradlew run --args='adapter'   - Run adapter pattern demo");
        System.out.println("  ./gradlew run --args='bridge'    - Run bridge pattern demo");
        System.out.println("  ./gradlew run --args='composite' - Run composite pattern demo");
        System.out.println("  ./gradlew run --args='decorator' - Run decorator pattern demo");
        System.out.println("  ./gradlew run --args='facade'    - Run facade pattern demo");
        System.out.println("  ./gradlew run --args='flyweight' - Run flyweight pattern demo");
        System.out.println("  ./gradlew run --args='proxy'     - Run proxy pattern demo");
    }
}
